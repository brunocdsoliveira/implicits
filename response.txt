We thank all reviewers for the helpful comments.

======
Review 1
======

* Presentation Improvements

Thank you for the suggestions to improve the presentation.  We will
definitely take them into account. In particular we are very happy
with the comment on making a punchline at the end of Section 2 on
stability as the key idea; we agree that this will be very helpful to
better convey the key idea to readers.

We would like to clarify the need for tracking the type variables
referred to on p.13. Consider for example resolving the type

		ρ = ∀b.b → b

  against the environment 

  		Γ0 = ∀c.c → c ~> id, a, a → a ~> f 

  i.e.

	     	Γ0 ⊢ ρ

  Imagine what would happen if we did not track the type variables. Firstly,
  using rule R-TAbs we would extend the environment with b 

  		Γ1 = Γ0, b

  and resolve the simple type

	     	Γ1 ⊢ b → b

  which would get stuck on a → a when considering which rule matches in Γ1. In particular,
  L-RuleMatch does not apply because a → a is different from b → b. Also L-RuleNoMatch does
  not apply because a → a and b → b unify under the substitution [b := a]; thus skipping 
  rule a → a would be deemed unstable.

  However, there is an error in the above reasoning. Code inlining cannot
  result in b being instantiated to a, because b is not free in the environment 
  Γ0, which is the environment at the point in the code where the query happens.
  To avoid this reasoning error, we keep track of the variables that are free
  in the environment in Γ0. These are the variables that can be substituted, while
  the variables added to the environment by rule R-TAbs cannot be substituted.

  In the end, by tracking the free variables, we can accept the
  resolution above, whereas without such tracking the program would be rejected.

  We will integrate this example in the text.


* Bugs in the typing rules

  We do indeed intentionally abuse the notation (although we would not call
  that bugs), but are happy to reformulate as you suggest to clarify
  the intended meaning.

* The intended type of bad on p. 5 is actually bad :: a -> a, 
  and not bad :: Trans a => a -> a, because we want to force
  the resolution of Trans at the definition of bad instead of
  the call sites of bad.

* Naming the implicit parameters only works if you want to directly
  refer to them. It does not work in the case of recursive
  resolution. For example consider the program:

  \(Int => Bool) . \Int . ?Bool

  where multiple rules have to be combined to resolve ?Bool.
  In such cases the system figures out how to combine the rules; the programmer
  does not have to write the composition himself.

* The β >Γ α judgement performs a necessary sanity check during
  unification, which is useful to prevent some invalid unifications
  that would arise due to scoping issues.
  Consider for example resolving the type 

		ρ = (∀β.β → β) → Int

  against the environment with a single rule

  		Γ0 = ∀α.(∀β.β → α) → Int 

  This will lead in rule Alg-M-Simp to the unification 
 
		mgu_{Γ1,α}((∀β.β → α) → Int,(∀β.β → β) → Int)

  with 

  		Γ1 = Γ0, α

  After several steps, we get

		mgu_{Γ2,α}(α,β)

  with 

  		Γ2 = Γ0, α, β

  The result here cannot be [β := α] because β is universally quantified
  and thus cannot be instantiated. This is why rule U-InstR should not apply;
  the mechanism used is that mgu is indexed in the unifiable variables --   
  only α in this example.

  However, we also cannot have [α := β] because β is not in scope at the point
  where α has to be instantiated. We see this because β occurs after α in the 
  environment Γ2. This scope check is captured in judgement β >Γ2 α. This check
  is the one that prevents rule U-InstL from applying and from producing an invalid
  substitution.

======
Review 3:
======

* Our work is on an improvement to the implicit calculus. Our
  improvement is mainly about working out the restrictions needed to
  ensure coherence. So it does not add any new programming features
  per se. Practical examples illustrating the uses of
  implicits were already presented in the following two cited papers:

	B. C. d. S. Oliveira, A. Moors, and M. Odersky. 2010. Type classes as objects
	and implicits. In OOPSLA. ACM, New York, NY, USA.

	B. C. d. S. Oliveira, T. Schrijvers, W. Choi, W. Lee, and K. Yi. 2012.  The
	Implicit Calculus: A New Foundation for Generic Programming. In PLDI ’12. ACM,
	New York, NY, USA. 

  Thus our paper focuses only on coherence and examples about
  coherence. 

  Nevertheless we will try our best to make the presentation more
  acessible by taking all the suggestions into account.
